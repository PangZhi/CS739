// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#ifndef PROTOBUF_msg_2eproto__INCLUDED
#define PROTOBUF_msg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_msg_2eproto();
void protobuf_AssignDesc_msg_2eproto();
void protobuf_ShutdownFile_msg_2eproto();

class clientMsg;
class serverMsg;

// ===================================================================

class clientMsg : public ::google::protobuf::Message {
 public:
  clientMsg();
  virtual ~clientMsg();

  clientMsg(const clientMsg& from);

  inline clientMsg& operator=(const clientMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const clientMsg& default_instance();

  void Swap(clientMsg* other);

  // implements Message ----------------------------------------------

  clientMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const clientMsg& from);
  void MergeFrom(const clientMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required string key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional string value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:clientMsg)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* key_;
  ::std::string* value_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2eproto();
  friend void protobuf_AssignDesc_msg_2eproto();
  friend void protobuf_ShutdownFile_msg_2eproto();

  void InitAsDefaultInstance();
  static clientMsg* default_instance_;
};
// -------------------------------------------------------------------

class serverMsg : public ::google::protobuf::Message {
 public:
  serverMsg();
  virtual ~serverMsg();

  serverMsg(const serverMsg& from);

  inline serverMsg& operator=(const serverMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const serverMsg& default_instance();

  void Swap(serverMsg* other);

  // implements Message ----------------------------------------------

  serverMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const serverMsg& from);
  void MergeFrom(const serverMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // optional string old_value = 2;
  inline bool has_old_value() const;
  inline void clear_old_value();
  static const int kOldValueFieldNumber = 2;
  inline const ::std::string& old_value() const;
  inline void set_old_value(const ::std::string& value);
  inline void set_old_value(const char* value);
  inline void set_old_value(const char* value, size_t size);
  inline ::std::string* mutable_old_value();
  inline ::std::string* release_old_value();
  inline void set_allocated_old_value(::std::string* old_value);

  // @@protoc_insertion_point(class_scope:serverMsg)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_old_value();
  inline void clear_has_old_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* old_value_;
  ::google::protobuf::int32 status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_msg_2eproto();
  friend void protobuf_AssignDesc_msg_2eproto();
  friend void protobuf_ShutdownFile_msg_2eproto();

  void InitAsDefaultInstance();
  static serverMsg* default_instance_;
};
// ===================================================================


// ===================================================================

// clientMsg

// required int32 type = 1;
inline bool clientMsg::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void clientMsg::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void clientMsg::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void clientMsg::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 clientMsg::type() const {
  return type_;
}
inline void clientMsg::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required string key = 2;
inline bool clientMsg::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void clientMsg::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void clientMsg::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void clientMsg::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& clientMsg::key() const {
  return *key_;
}
inline void clientMsg::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void clientMsg::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void clientMsg::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* clientMsg::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* clientMsg::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void clientMsg::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string value = 3;
inline bool clientMsg::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void clientMsg::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void clientMsg::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void clientMsg::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& clientMsg::value() const {
  return *value_;
}
inline void clientMsg::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void clientMsg::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void clientMsg::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* clientMsg::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* clientMsg::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void clientMsg::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// serverMsg

// required int32 status = 1;
inline bool serverMsg::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void serverMsg::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void serverMsg::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void serverMsg::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 serverMsg::status() const {
  return status_;
}
inline void serverMsg::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional string old_value = 2;
inline bool serverMsg::has_old_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void serverMsg::set_has_old_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void serverMsg::clear_has_old_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void serverMsg::clear_old_value() {
  if (old_value_ != &::google::protobuf::internal::kEmptyString) {
    old_value_->clear();
  }
  clear_has_old_value();
}
inline const ::std::string& serverMsg::old_value() const {
  return *old_value_;
}
inline void serverMsg::set_old_value(const ::std::string& value) {
  set_has_old_value();
  if (old_value_ == &::google::protobuf::internal::kEmptyString) {
    old_value_ = new ::std::string;
  }
  old_value_->assign(value);
}
inline void serverMsg::set_old_value(const char* value) {
  set_has_old_value();
  if (old_value_ == &::google::protobuf::internal::kEmptyString) {
    old_value_ = new ::std::string;
  }
  old_value_->assign(value);
}
inline void serverMsg::set_old_value(const char* value, size_t size) {
  set_has_old_value();
  if (old_value_ == &::google::protobuf::internal::kEmptyString) {
    old_value_ = new ::std::string;
  }
  old_value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* serverMsg::mutable_old_value() {
  set_has_old_value();
  if (old_value_ == &::google::protobuf::internal::kEmptyString) {
    old_value_ = new ::std::string;
  }
  return old_value_;
}
inline ::std::string* serverMsg::release_old_value() {
  clear_has_old_value();
  if (old_value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = old_value_;
    old_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void serverMsg::set_allocated_old_value(::std::string* old_value) {
  if (old_value_ != &::google::protobuf::internal::kEmptyString) {
    delete old_value_;
  }
  if (old_value) {
    set_has_old_value();
    old_value_ = old_value;
  } else {
    clear_has_old_value();
    old_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_msg_2eproto__INCLUDED
